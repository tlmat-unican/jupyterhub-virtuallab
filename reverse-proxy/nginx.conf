# docker exec reverse-proxy nginx -s reload
# user nobody; # a directive in the 'main' context

events {
  # configuration of connection processing
   worker_connections 4096;
}

# top-level http config for websocket headers
http {
  upstream backend {
    server jupyterhub-tlmat:8000;
  }
  
  # If Upgrade is defined, Connection = upgrade
  # If Upgrade is empty, Connection = close
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  map $remote_addr $proxy_forwarded_elem {
      # IPv4 addresses can be sent as-is
      ~^[0-9.]+$          "for=$remote_addr";

      # IPv6 addresses need to be bracketed and quoted
      ~^[0-9A-Fa-f:.]+$   "for=\"[$remote_addr]\"";

      # Unix domain socket names cannot be represented in RFC 7239 syntax
      default             "for=unknown";
  }

  map $http_forwarded $proxy_add_forwarded {
      # If the incoming Forwarded header is syntactically valid, append to it
      "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

      # Otherwise, replace it
      default "$proxy_forwarded_elem";
  }

  # HTTP server to redirect all 80 traffic to SSL/HTTPS
  server {
    listen 80;
    server_name ${HOST_NAME} ${HOST_INTERNAL_NAME} ${HOST_INTERNAL_IP};

    # Tell all requests to port 80 to be 302 redirected to HTTPS
    return 302 https://$host$request_uri;
  }

  # HTTPS server to handle JupyterHub
  server {
    listen 443 ssl;
    listen [::]:443 ssl http2;
    server_name ${HOST_NAME} ${HOST_INTERNAL_NAME} ${HOST_INTERNAL_IP};

    ssl_certificate /etc/ssl/letsencrypt/server.crt.pem;
    ssl_certificate_key /etc/ssl/letsencrypt/server.key.pem;
    ssl_dhparam /etc/ssl/letsencrypt/dhparam4096.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ALL:+HIGH:!ADH:!EXP:!SSLv2:!SSLv3:!MEDIUM:!LOW:!NULL:!aNULL;
    
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Add headers to serve security related headers    
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    add_header Referrer-Policy "no-referrer";

    # Managing literal requests to the JupyterHub front end
    location / {
      proxy_pass http://backend;
      # proxy_redirect off;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Forwarded "$proxy_add_forwarded;proto=$scheme";

      # websocket headers
      #proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header X-Scheme $scheme;

      proxy_buffering off;
    }

    # Managing requests to verify letsencrypt host
    location ~ /.well-known {
      allow all;
    }
  }
}